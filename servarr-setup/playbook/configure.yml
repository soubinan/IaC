---
- name: Waiting for host readiness
  hosts: all
  gather_facts: false
  remote_user: root
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  tasks:
    - name: Wait for target connection to become reachable/usable
      ansible.builtin.wait_for_connection:

- name: Configure
  hosts: all
  remote_user: root
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

  tasks:
    - name: Count matching variables
      ansible.builtin.set_fact:
        max_index: "{{ vars | dict2items | selectattr('key', 'match', '^src_data_\\d+_path$') | list | length }}"

    - name: Check matching variables
      ansible.builtin.set_fact:
        has_sync_paths: "{{ max_index | bool }}"

    - name: Create sync_paths dynamically
      ansible.builtin.set_fact:
        sync_paths: "{{ sync_paths | default([]) + [ { 'dst_path': vars['dst_data_' ~ item ~ '_path'], 'src_path': vars['src_data_' ~ item ~ '_path'] } ] }}"
      with_sequence: start=0 end="{{ (max_index | int) - 1 if has_sync_paths else 0 }}"
      failed_when: false
      when: has_sync_paths

    - name: Create empty sync_paths
      ansible.builtin.set_fact:
        sync_paths: []
      failed_when: false
      when: not has_sync_paths

    - name: Update packages
      ansible.builtin.apt:
        upgrade: true
        update_cache: true
      changed_when: false

    - name: Empty /tmp
      ansible.builtin.command: rm -rf /tmp/*
      failed_when: false
      changed_when: true

    - name: Check auto-login is configured
      ansible.builtin.stat:
        path: /etc/systemd/system/container-getty@1.service.d/override.conf
      register: _auto_login_config
      changed_when: false
      failed_when: false

    - name: Setup auto-login
      when: not _auto_login_config.stat.exists
      block:
        - name: Ensure override conf directory exists
          ansible.builtin.file:
            path: /etc/systemd/system/container-getty@1.service.d
            state: directory
            mode: "0755"

        - name: Enable auto-login
          ansible.builtin.copy:
            dest: /etc/systemd/system/container-getty@1.service.d/override.conf
            content: |
              [Service]
              ExecStart=
              ExecStart=-/sbin/agetty --autologin root --noclear --keep-baud tty%I 115200,38400,9600 \$TERM
            mode: "0440"

        - name: Daemon reload
          ansible.builtin.systemd_service:
            daemon_reload: true

        - name: Restart Synchronization timer
          ansible.builtin.systemd_service:
            enabled: true
            name: container-getty@1
            state: restarted

    - name: Check RClone is installed
      ansible.builtin.command: rclone -h
      register: _rclone_presence_check
      changed_when: false
      failed_when: false

    - name: Install RClone
      when: _rclone_presence_check.rc > 0
      block:
        - name: Get RClone version
          ansible.builtin.uri:
            url: https://downloads.rclone.org/version.txt
            return_content: true
          register: _rclone_version

        - name: Download RClone package
          ansible.builtin.get_url:
            url: https://downloads.rclone.org/{{ rclone_version }}/rclone-{{ rclone_version }}-linux-amd64.deb
            dest: /tmp/rclone.deb
            mode: "0744"
          vars:
            rclone_version: "{{ _rclone_version.content | trim | split | last }}"

        - name: Install RClone
          ansible.builtin.apt:
            deb: /tmp/rclone.deb

    - name: Setup RClone
      when: has_sync_paths
      block:
        - name: Ensure RClone directory exists
          ansible.builtin.file:
            path: ~/.config/rclone
            state: directory
            mode: "0755"

        - name: Copy config file
          ansible.builtin.template:
            src: files/rclone.conf
            dest: ~/.config/rclone/rclone.conf
            mode: "0440"

        - name: Retrieve previous configs version
          ansible.builtin.command: |
            rclone copy minio:operations/apps_configs/{{ item.dst_path }} {{ item.src_path }}
          when: _rclone_presence_check.rc > 0
          loop: "{{ sync_paths }}"
          changed_when: false

        - name: Fix ownership
          ansible.builtin.command: |
            chown -R {{ app_name | lower }}:media /var/lib/{{ app_name | lower }}
          when: item.src_path == "/var/lib/" ~ (app_name | lower)
          loop: "{{ sync_paths }}"
          changed_when: false

        - name: Copy unit files
          ansible.builtin.template:
            src: "files/{{ item }}"
            dest: "/etc/systemd/system/{{ item }}"
            mode: "0440"
            backup: true
            force: true
          loop:
            - rclone.timer
            - rclone.service

        - name: Daemon reload
          ansible.builtin.systemd_service:
            daemon_reload: true

        - name: Ensure Synchronization service is stopped
          ansible.builtin.systemd_service:
            name: rclone.service
            state: stopped

        - name: Enable Synchronization timer
          ansible.builtin.systemd_service:
            enabled: true
            name: rclone.timer
            state: restarted

        - name: Wait for synchronization to be completed
          ansible.builtin.pause:
            seconds: 10

    - name: Configure NFS mount
      when: local_media_path is defined and nfs_media_path is defined
      block:
        - name: Install required packages
          ansible.builtin.apt:
            pkg:
              - nfs-common
            state: present
            autoremove: true

        - name: Creates mounting directory
          ansible.builtin.file:
            path: "{{ local_media_path }}"
            state: directory
            mode: "0777"

        - name: Copy mount file
          ansible.builtin.template:
            src: files/auto.mount
            dest: "/etc/systemd/system/{{ item.local_path | replace('/', '-') | regex_replace('^-', '') }}.mount"
            mode: "0644"
            backup: true
            force: true
          loop:
            - local_path: "{{ local_media_path }}"
              nfs_path: "{{ nfs_media_path }}"

        - name: Daemon reload
          ansible.builtin.systemd_service:
            daemon_reload: true

        - name: Enable mounts
          ansible.builtin.systemd_service:
            enabled: true
            state: started
            name: "{{ item | replace('/', '-') | regex_replace('^-', '') }}.mount"
          loop:
            - "{{ local_media_path }}"

    - name: Setup Servarr
      when: app_name == "servarr"
      block:
        - name: Install required packages
          ansible.builtin.apt:
            pkg:
              - xz-utils
              - chromium
              - chromium-common
              - chromium-driver
              - xvfb
            state: present
            autoremove: true

        - name: Download Recyclarr
          ansible.builtin.get_url:
            url: "https://github.com/recyclarr/recyclarr/releases/latest/download/recyclarr-linux-x64.tar.xz"
            dest: /tmp/recyclarr-linux-x64.tar.xz
            mode: "0777"

        - name: Install Recyclarr
          ansible.builtin.unarchive:
            src: /tmp/recyclarr-linux-x64.tar.xz
            dest: /usr/local/bin
            remote_src: true
            mode: "0766"

        - name: Creates Recyclarr directory
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0777"
          loop:
            - /opt/Recyclarr
          register: recyclarr_dir

        - name: Copy Recyclarr config file
          ansible.builtin.template:
            src: "files/recyclarr.yml"
            dest: "{{ recyclarr_dir.results[0].path }}/recyclarr.yml"
            mode: "0644"
            force: true

        - name: Copy Recyclarr unit files
          ansible.builtin.template:
            src: "files/{{ item }}"
            dest: "/etc/systemd/system/{{ item }}"
            mode: "0440"
            backup: true
            force: true
          loop:
            - "recyclarr.timer"
            - "recyclarr.service"
          vars:
            config_path: "{{ recyclarr_dir.results[0].path }}"
            configs:
              - recyclarr.yml

        - name: Daemon reload
          ansible.builtin.systemd_service:
            daemon_reload: true

        - name: Ensure Recyclarr service is stopped
          ansible.builtin.systemd_service:
            name: recyclarr.service
            state: stopped

        - name: Enable Recyclarr timer
          ansible.builtin.systemd_service:
            enabled: true
            name: recyclarr.timer
            state: restarted

        - name: Copy homepage config file
          ansible.builtin.template:
            src: "files/mafl.yml"
            dest: "/app/data/config.yml"
            mode: "6440"

        - name: Restart homepage service
          ansible.builtin.systemd_service:
            name: mafl.service
            state: restarted

        - name: Ensure group exists with correct GID
          ansible.builtin.group:
            name: media
            state: present

        - name: Create a Flaresolverr user
          ansible.builtin.user:
            name: flaresolverr
            group: media

        - name: Download Flaresolverr
          ansible.builtin.get_url:
            url: https://github.com/FlareSolverr/FlareSolverr/releases/latest/download/flaresolverr_linux_x64.tar.gz
            dest: /tmp/flaresolverr_linux_x64.tar.gz
            mode: "0777"

        - name: Creates Flaresolverr directory
          ansible.builtin.file:
            path: /opt/flaresolverr
            state: directory
            mode: "0777"
            owner: flaresolverr
            group: media

        - name: Unarchive /tmp/flaresolverr_linux_x64.tar.gz
          ansible.builtin.unarchive:
            src: /tmp/flaresolverr_linux_x64.tar.gz
            dest: /opt/
            remote_src: true
            owner: flaresolverr
            group: media

        - name: Delete /tmp/flaresolverr_linux_x64.tar.gz
          ansible.builtin.file:
            state: absent
            path: /tmp/flaresolverr_linux_x64.tar.gz

        - name: Copy Flaresolverr unit file
          ansible.builtin.copy:
            src: "files/flaresolverr.service"
            dest: "/etc/systemd/system/flaresolverr.service"
            mode: "0440"
            force: true

        - name: Daemon reload
          ansible.builtin.systemd_service:
            daemon_reload: true

        - name: Restart Flaresolverr timer
          ansible.builtin.systemd_service:
            enabled: true
            name: flaresolverr.service
            state: restarted

    - name: Check config path exists
      ansible.builtin.stat:
        path: "/var/lib/{{ app_name }}"
      register: config_path_exists

    - name: Copy config file
      ansible.builtin.template:
        src: "files/config.xml"
        dest: "/var/lib/{{ app_name }}/config.xml"
        mode: "0644"
        force: true
        owner: "{{ app_name }}"
        group: media
      when: config_path_exists.stat.exists

    - name: Restart starr app service
      ansible.builtin.systemd_service:
        enabled: true
        name: "{{ app_name }}.service"
        state: restarted
      when: has_sync_paths or config_path_exists.stat.exists

    - name: Ensure bazarr user own /opt/bazarr
      ansible.builtin.command: |
        chown -R bazarr:bazarr /app/bazarr
      when: has_sync_paths and (app_name == "radarr" or app_name == "sonarr")
      failed_when: false
      changed_when: true

    - name: Restart bazarr service
      ansible.builtin.systemd_service:
        enabled: true
        name: bazarr.service
        state: restarted
      when: has_sync_paths and (app_name == "radarr" or app_name == "sonarr")
      failed_when: false

    - name: Cleanup disk space
      ansible.builtin.command: |
        rm -rf /tmp/*
        apt clean
        apt autoremove -y
      failed_when: false
      changed_when: true
...
